<?php
/**
 * BSS Commerce Co.
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://bsscommerce.com/Bss-Commerce-License.txt
 *
 * @category   BSS
 * @package    Bss_FastOrder
 * @author     Extension Team
 * @copyright  Copyright (c) 2017-2018 BSS Commerce Co. ( http://bsscommerce.com )
 * @license    http://bsscommerce.com/Bss-Commerce-License.txt
 */
?>
<?php
/** @var \Magento\Widget\Block\Adminhtml\Widget\Instance\Edit\Tab\Main\Layout $block */
?>
<div id="page_group_container"></div>

<script id="ie-deferred-loader" defer="defer" src="//:"></script>
<script>
    require([
        'jquery',
        'mage/template',
        'Magento_Ui/js/modal/alert',
        "prototype",
        "extjs/ext-tree-checkbox"
    ], function (jQuery, mageTemplate, alert) {

//<![CDATA[

        var pageGroupTemplate = '<div class="fieldset-wrapper page_group_container" id="page_group_container_<%- data.id %>">' +
            '<div class="fieldset-wrapper-content">' +
            <?php foreach ($block->getDisplayOnContainers() as $container) : ?>
            '<div class="no-display <?= $block->escapeJs($container['code']) ?> group_container" id="<?= $block->escapeJs($container['name']) ?>_<%- data.id %>">' +
            '<input disabled="disabled" type="hidden" class="container_name" name="__[container_name]" value="widget_instance[<%- data.id %>][<?= $block->escapeJs($container['name']) ?>]" />' +
            '<input disabled="disabled" type="hidden" name="widget_instance[<%- data.id %>][<?= $block->escapeJs($container['name']) ?>][page_id]" value="<%- data.page_id %>" />' +
            '<input disabled="disabled" type="hidden" class="layout_handle_pattern" name="widget_instance[<%- data.id %>][<?= $block->escapeJs($container['name']) ?>][layout_handle]" value="<?= $block->escapeJs($container['layout_handle']) ?>" />' +
            '<div class="no-display chooser_container" id="<?= $block->escapeJs($container['name']) ?>_ids_<%- data.id %>">' +
            '<input disabled="disabled" type="hidden" class="is_anchor_only" name="widget_instance[<%- data.id %>][<?= $block->escapeJs($container['name']) ?>][is_anchor_only]" value="<?= $block->escapeJs($container['is_anchor_only']) ?>" />' +
            '<input disabled="disabled" type="hidden" class="product_type_id" name="widget_instance[<%- data.id %>][<?= $block->escapeJs($container['name']) ?>][product_type_id]" value="<?= $block->escapeJs($container['product_type_id']) ?>" />' +
            '<p>' +
            '<a class="widget-option-chooser" href="javascript:void(0)" onclick="WidgetInstance.displayEntityChooser(\'<?= $block->escapeJs($container['code']) ?>\', \'<?= $block->escapeJs($container['name']) ?>_ids_<%- data.id %>\')"  title="<?= $block->escapeJs(__('Open Chooser')) ?>">' +
            '<img src="<?= $block->escapeUrl($block->getViewFileUrl('images/rule_chooser_trigger.gif')) ?>" alt="<?= $block->escapeJs(__('Open Chooser')) ?>" />' +
            '</a>&nbsp;' +
            '<a href="javascript:void(0)" onclick="WidgetInstance.hideEntityChooser(\'<?= $block->escapeJs($container['name']) ?>_ids_<%- data.id %>\')" title="<?= $block->escapeJs(__('Apply')) ?>">' +
            '<img src="<?= $block->escapeUrl($block->getViewFileUrl('images/rule_component_apply.gif')) ?>" alt="<?= $block->escapeJs(__('Apply')) ?>" />' +
            '</a>' +
            '</p>' +
            '<div class="chooser"></div>' +
            '</div>' +
            '</div>' +
            <?php endforeach; ?>
            '</div>' +
            '</div>';

        window.pageGroupTemplate = pageGroupTemplate;

        var WidgetInstance = {
            pageGroupTemplate: pageGroupTemplate,
            pageGroupContainerId: 'page_group_container',
            count: 0,
            activePageGroups: $H({}),
            selectedItems: {},

            addPageGroup: function (data) {
                if (this.pageGroupTemplate && (pageGroupContainer = $(this.pageGroupContainerId))) {
                    if (!data.page_id) {
                        data = {};
                        data.page_id = 0;
                        data.entities = '';
                    }
                    data.id = this.count++;
                    if (data[data.group + '_entities']) {
                        var selected_entities = data[data.group + '_entities'].split(',');
                        if (selected_entities.length > 0) {
                            for (var i = 0; i < selected_entities.length; i++) {
                                this.addProductItemToSelection(data.group + '_ids_' + data.id, selected_entities[i]);
                            }
                        }
                    }
                    pageGroupTemplateObj = mageTemplate(this.pageGroupTemplate);
                    Element.insert(pageGroupContainer, {
                        'bottom': pageGroupTemplateObj({
                            data: data
                        })
                    });
                    this.displayPageGroup('all_products_0');
                }
            },
            addProductItemToSelection: function (groupId, item) {
                if (undefined == this.selectedItems[groupId]) {
                    this.selectedItems[groupId] = $H({});
                }
                if (!isNaN(parseInt(item))) {
                    this.selectedItems[groupId].set(item, 1);
                }
            },
            removeProductItemFromSelection: function (groupId, item) {
                if (undefined !== this.selectedItems[groupId]) {
                    this.selectedItems[groupId].unset(item);
                }
            },
            showBlockContainer: function (container) {
                container = $(container);
                if (container) {
                    container.removeClassName('no-display');
                    container.removeClassName('ignore-validate');
                    container.up('.fieldset-wrapper').addClassName('opened');
                    container.select('input', 'select').each(function (element) {
                        $(element).removeAttribute('disabled');
                    });
                    container.show();
                }
            },
            hideBlockContainer: function (container) {
                container = $(container);
                if (container) {
                    container.addClassName('no-display');
                    container.addClassName('ignore-validate');
                    container.select('input', 'select').each(function (element) {
                        $(element).writeAttribute('disabled', 'disabled');
                    });
                    container.hide();
                }
            },
            displayPageGroup: function (container) {
                container = $(container);
                this.showBlockContainer(container);
                this.togglePageGroupChooser('all_products_0');
            },
            displayEntityChooser: function (type, chooser, additional) {
                if (!additional) {
                    additional = {};
                }
                if (type == 'categories') {
                    additional.url = '<?= $block->escapeUrl($block->getCategoriesChooserUrl()) ?>';
                    additional.post_parameters = $H({'is_anchor_only': $(chooser).down('input.is_anchor_only').value});
                } else if (type == 'products') {
                    additional.url = '<?= $block->escapeUrl($block->getProductsChooserUrl()) ?>';
                    additional.post_parameters = $H({'product_type_id': 'bss_fastorder'});
                }
                if (chooser && additional) {
                    this.displayChooser(chooser, additional);
                }
            },
            hideEntityChooser: function (chooser) {
                chooser = $(chooser).down('div.chooser');
                if (chooser) {
                    chooser.addClassName('no-display');
                    chooser.hide();
                }
            },
            displayChooser: function (chooser, additional) {
                var self = this;
                chooser = $(chooser).down('div.chooser');
                entities = chooser.up('div.bss_chooser_container').down('input[type="text"].entities').value;
                selectionId = chooser.up('div.bss_chooser_container').id;
                postParameters = $H({selected: entities});
                url = '';
                if (additional) {
                    if (additional.url) url = additional.url;
                    if (additional.post_parameters) {
                        additional.post_parameters.each(function (pair) {
                            postParameters.set(pair.key, pair.value);
                        });
                    }
                }
                if (chooser && url) {
                    if (chooser.innerHTML == '') {
                        new Ajax.Request(url, {
                            method: 'post',
                            parameters: postParameters,
                            onSuccess: function (transport) {
                                try {
                                    if (transport.responseText) {
                                        Element.insert(chooser, transport.responseText);
                                        chooser.removeClassName('no-display');
                                        chooser.show();
                                        if (entities != '') {
                                            jQuery.each(entities.split(','), function( index, value ) {
                                                self.addProductItemToSelection(selectionId, value);
                                            });
                                        }
                                    }
                                } catch (e) {
                                    alert({
                                        content: 'Error occurs during loading chooser.'
                                    });
                                }
                            }
                        });
                    } else {
                        chooser.removeClassName('no-display');
                        chooser.show();
                    }
                }
            },
            checkProduct: function (event) {
                var elm = event.memo.element,
                    container = event.target.up('div.chooser').up('div.bss_chooser_container'),
                    selectionId = container.id,
                    entitiesElm = container.down('input[type="text"].entities');
                if (elm.checked) {
                    this.addProductItemToSelection(selectionId, elm.value);
                } else {
                    this.removeProductItemFromSelection(selectionId, elm.value);
                }
                if (entitiesElm) {
                    entitiesElm.value = this.selectedItems[selectionId].keys().join(',');
                }
            },
            togglePageGroupChooser: function (element) {
                element = $(element);
                if (element && (chooser = element.down('div.chooser_container'))) {
                    if (element.value == 'all') {
                        chooser.addClassName('no-display');
                        chooser.hide();
                    } else {
                        chooser.removeClassName('no-display');
                        chooser.show();
                    }
                }
            },
        };

        window.WidgetInstance = WidgetInstance;

        jQuery(function () {
            WidgetInstance.addPageGroup({});
            Event.observe(document, 'product:changed', function (event) {
                WidgetInstance.checkProduct(event);
            });
            jQuery('#fastorder_prepopulated_product_product_selector-container #fastorder_prepopulated_product_product_selector').change(function () {
                var selectedNewValue = jQuery(this).val().split(',');
                var groupId = 'fastorder_prepopulated_product_product_selector-container';
                WidgetInstance.selectedItems[groupId] = $H({});
                jQuery.each(selectedNewValue, function( index, item ) {
                    WidgetInstance.addProductItemToSelection(groupId, item);
                });
                jQuery("#" + groupId + " input[name='in_products']").each(function() {
                    if(jQuery.inArray(jQuery(this).val(), selectedNewValue) !== -1 && !jQuery(this).is(":checked")) {
                        jQuery(this).prop('checked', true);
                        jQuery(this).trigger('change');
                    } else if (jQuery.inArray(jQuery(this).val(), selectedNewValue) === -1 && jQuery(this).is(":checked")) {
                        jQuery(this).prop('checked', false);
                        jQuery(this).trigger('change');
                    }
                });
            })
        });
//]]>

    });
</script>
