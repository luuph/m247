<?php
/**
 * BSS Commerce Co.
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://bsscommerce.com/Bss-Commerce-License.txt
 *
 * @category   BSS
 * @package    Bss_XmlSiteMap
 * @author     Extension Team
 * @copyright  Copyright (c) 2018-2019 BSS Commerce Co. ( http://bsscommerce.com )
 * @license    http://bsscommerce.com/Bss-Commerce-License.txt
 */
namespace Bss\XmlSiteMap\Model\ResourceModel\Catalog;

use Magento\CatalogUrlRewrite\Model\CategoryUrlRewriteGenerator;

/**
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 */
class Category extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
{
    /**
     * Collection Zend Db select
     *
     * @var \Magento\Framework\DB\Select
     */
    public $select;

    /**
     * Attribute cache
     *
     * @var array
     */
    public $attributesCache = [];

    /**
     * @var \Magento\Store\Model\StoreManagerInterface
     */
    public $storeManager;

    /**
     * @var \Magento\Catalog\Model\ResourceModel\Category
     */
    public $categoryResource;

    /**
     * @var \Magento\Framework\EntityManager\MetadataPool
     */
    public $metadataPool;

    /**
     * @var \Bss\XmlSiteMap\Helper\Data
     */
    public $sitemapData;

    /**
     * @var \Magento\Framework\ObjectManagerInterface
     */
    public $categoryCollectionFactory;

    /**
     * @var \Magento\Framework\DataObject
     */
    public $data;

    /**
     * Category constructor.
     * @param \Magento\Framework\Model\ResourceModel\Db\Context $context
     * @param \Magento\Store\Model\StoreManagerInterface $storeManager
     * @param \Bss\XmlSiteMap\Helper\Data $sitemapData
     * @param \Magento\Catalog\Model\ResourceModel\Category $categoryResource
     * @param \Magento\Framework\EntityManager\MetadataPool $metadataPool
     * @param \Magento\Framework\DataObject $data
     * @param \Magento\Framework\ObjectManagerInterface $objectManager
     * @param null $connectionName
     */
    public function __construct(
        \Magento\Framework\Model\ResourceModel\Db\Context $context,
        \Magento\Store\Model\StoreManagerInterface $storeManager,
        \Bss\XmlSiteMap\Helper\Data $sitemapData,
        \Magento\Catalog\Model\ResourceModel\Category $categoryResource,
        \Magento\Framework\EntityManager\MetadataPool $metadataPool,
        \Magento\Framework\DataObject $data,
        \Magento\Framework\ObjectManagerInterface $objectManager,
        $connectionName = null
    ) {
        $this->sitemapData = $sitemapData;
        $this->categoryCollectionFactory = $objectManager;
        $this->data = $data;
        $this->storeManager = $storeManager;
        $this->categoryResource = $categoryResource;
        parent::__construct($context, $connectionName);
        $this->metadataPool = $metadataPool;
    }

    /**
     * @inheritDoc
     */
    public function _construct()
    {
        $this->_init('catalog_category_entity', 'entity_id');
    }

    /**
     * Get Collection by store id
     *
     * @param int $storeId
     * @return array|bool
     * @throws \Magento\Framework\Exception\LocalizedException
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     * @throws \Zend_Db_Statement_Exception
     */
    public function getCollection($storeId)
    {
        $helper = $this->sitemapData;
        $disableCategoryId = $helper->getCategoryIdInclude($storeId);

        $categories = [];
        $stringItemCat = (string)$disableCategoryId;
        $arrayItemCat = explode(',', $stringItemCat);
        /* @var $store \Magento\Store\Model\Store */
        $store = $this->storeManager->getStore($storeId);

        if (!$store) {
            return false;
        }

        $connection = $this->getConnection();

        $this->select = $connection->select()->from(
            $this->getMainTable()
        )->where(
            $this->getIdFieldName() . '=?',
            $store->getRootCategoryId()
        );
        $categoryRow = $connection->fetchRow($this->select);

        if (!$categoryRow) {
            return false;
        }

        $this->select = $connection->select()->from(
            ['e' => $this->getMainTable()],
            [$this->getIdFieldName(), 'updated_at']
        )->joinLeft(
            ['url_rewrite' => $this->getTable('url_rewrite')],
            'e.entity_id = url_rewrite.entity_id AND url_rewrite.is_autogenerated = 1'
            . $connection->quoteInto(' AND url_rewrite.store_id = ?', $store->getId())
            . $connection->quoteInto(' AND url_rewrite.entity_type = ?', CategoryUrlRewriteGenerator::ENTITY_TYPE),
            ['url' => 'request_path']
        )->where(
            'e.path LIKE ?',
            $categoryRow['path'] . '/%'
        );

        $this->addFilter($storeId, 'is_active', 1);

        $query = $connection->query($this->select);

        while ($row = $query->fetch()) {
            $check = 0;
            foreach ($arrayItemCat as $categoryId) {
                if ($row['entity_id'] == $categoryId) {
                    $check = 1;
                }
            }
            if ($row['entity_id'] != '2'
                && $check == 0) {
                $category = $this->prepareCategory($row);
                $categories[$category->getId()] = $category;
            }
        }
        return $categories;
    }

    /**
     * Prepare Category
     *
     * @param array $categoryRow
     * @return mixed
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function prepareCategory(array $categoryRow)
    {
        $category = $this->categoryCollectionFactory->create(\Magento\Catalog\Model\Category::class);
        $category->setId($categoryRow[$this->getIdFieldName()]);
        $categoryUrl = !empty($categoryRow['url']) ? $categoryRow['url'] : 'catalog/category/view/id/' .
            $category->getId();
        $category->setUrl($categoryUrl);
        $category->setUpdatedAt($categoryRow['updated_at']);
        return $category;
    }

    /**
     * Add filter to category
     *
     * @param int $storeId
     * @param int $attributeCode
     * @param string $value
     * @param string $type
     * @return bool|\Magento\Framework\DB\Select
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function addFilter($storeId, $attributeCode, $value, $type = '=')
    {
        $meta = $this->metadataPool->getMetadata(\Magento\Catalog\Api\Data\CategoryInterface::class);
        $linkField = $meta->getLinkField();

        if (!$this->select instanceof \Magento\Framework\DB\Select) {
            return false;
        }

        if (!isset($this->attributesCache[$attributeCode])) {
            $attribute = $this->categoryResource->getAttribute($attributeCode);

            $this->attributesCache[$attributeCode] = [
                'entity_type_id' => $attribute->getEntityTypeId(),
                'attribute_id' => $attribute->getId(),
                'table' => $attribute->getBackend()->getTable(),
                'is_global' => $attribute->getIsGlobal(),
                'backend_type' => $attribute->getBackendType(),
            ];
        }
        $attribute = $this->attributesCache[$attributeCode];

        switch ($type) {
            case '=':
                $conditionRule = '=?';
                break;
            case 'in':
                $conditionRule = ' IN(?)';
                break;
            default:
                return false;
        }

        if ($attribute['backend_type'] == 'static') {
            $this->select->where('e.' . $attributeCode . $conditionRule, $value);
        } else {
            $this->select->join(
                ['t1_' . $attributeCode => $attribute['table']],
                'e.' . $linkField . ' = t1_' . $attributeCode . '.' . $linkField .
                ' AND t1_' . $attributeCode . '.store_id = 0',
                []
            )->where(
                't1_' . $attributeCode . '.attribute_id=?',
                $attribute['attribute_id']
            );

            if ($attribute['is_global']) {
                $this->select->where('t1_' . $attributeCode . '.value' . $conditionRule, $value);
            } else {
                $ifCase = $this->getConnection()->getCheckSql(
                    't2_' . $attributeCode . '.value_id > 0',
                    't2_' . $attributeCode . '.value',
                    't1_' . $attributeCode . '.value'
                );
                $this->select->joinLeft(
                    ['t2_' . $attributeCode => $attribute['table']],
                    $this->getConnection()->quoteInto(
                        't1_' .
                        $attributeCode .
                        '.' . $linkField . ' = t2_' .
                        $attributeCode .
                        '.' . $linkField . ' AND t1_' .
                        $attributeCode .
                        '.attribute_id = t2_' .
                        $attributeCode .
                        '.attribute_id AND t2_' .
                        $attributeCode .
                        '.store_id=?',
                        $storeId
                    ),
                    []
                )->where(
                    '(' . $ifCase . ')' . $conditionRule,
                    $value
                );
            }
        }

        return $this->select;
    }
}